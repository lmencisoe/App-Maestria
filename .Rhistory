legend.text = element_text(color = "black", size = 10))
top <- data_mapa %>%
select(NOMBRE_MPI, Promedio_2017, Promedio_2018, Promedio_2019,
Trimestre_Anterior,Prediccion) %>%
distinct() %>%
arrange(desc(Prediccion))
names(top) <- c('Municipio','Primer trimestre 2017','Primer trimestre 2018','Primer trimestre 2019',
'Trimestre Anterior','Prediccion')
top_2 <- top[1:5,]
pp2 <- top_2 %>%
filter(!is.na(Municipio))
acc_depto <- data.frame(ACC_Prediccion = acc_depto)
Lista_salida[['acc']] <- acc_depto
Lista_salida[['grafico']] <- pp
Lista_salida[['tabla']] <- pp2
Lista_todos[[deptos]] <- Lista_salida
}
}
return(list(Lista = Lista_todos,
afir = afir,
depto = deptos))
})
#### 2. BOGOTA
output$depto_data <- DT::renderDataTable({
req(reactivo())
Lista <- reactivo()$Lista
selTable <- Lista[[1]]$tabla
DT::datatable(data = selTable,
escape=FALSE,
options = list(sDom  = '<"top">lrt<"bottom">ip',
lengthChange = FALSE,
dom = 'l',
searchable = FALSE))
})
output$resu7 <- renderValueBox({
req(reactivo())
Lista <- reactivo()$Lista
valueBox(value = tags$p(Lista[[1]]$acc, style = "font-size: 200%;"),
"Accuracy del modelo a nivel departamento.",
icon = icon("chart-pie"), color = "black")
})
output$depto_plot <- renderGirafe({
req(reactivo())
Lista <- reactivo()$Lista
grafico <- Lista[[1]]$grafico
girafe(ggobj = grafico, width_svg = 15, height_svg = 12.5)
})
output$Pais <- renderGirafe({
girafe(ggobj = gg1, width_svg = 21, height_svg = 17.5)
})
output$resu1 <- renderValueBox({
valueBox(value = tags$p(total_2019, style = "font-size: 200%;"),
"Casos totales registrados en el año 2019.", icon = icon("bell"), color = "navy")
})
output$resu2 <- renderValueBox({
valueBox(value = tags$p(total_2019_info, style = "font-size: 150%;"),
"Casos totales registrados en el año 2019,
de municipios que tienen información en los últimos 4 años.", icon = icon("check-circle"),
color = "blue")
})
output$resu3 <- renderValueBox({
valueBox(value = tags$p(total_deptos_riesgo, style = "font-size: 150%;"),
"**Casos totales registrados en los departamentos de mayor riesgo para el año 2019. (57% del total)",
icon = icon("chart-pie"), color = "light-blue")
})
output$resu4 <- renderValueBox({
valueBox(value = tags$p(total_deptos_riesgo_l_trim, style = "font-size: 150%;"),
"**Casos registrados en departamentos de mayor riesgo
durante el último trimestre del 2019. (25% del total del año)", icon = icon("bell"), color = "aqua")
})
output$resu5 <- renderValueBox({
valueBox(value = tags$p(total_deptos_riesgo_l_trim_pred, style = "font-size: 150%;"),
"**Predicción del último trimestre del año 2019 de
los departamentos en mayor riesgo riesgo.", icon = icon("bell"),
color = "teal")
})
output$resu6 <- renderValueBox({
valueBox(value = tags$p(total_deptos_riesgo_2020, style = "font-size: 150%;"),
"**Predicción del primer trimestre del año 2020 en los
departamentos de mayor riesgo.",
icon = icon("chart-pie"), color = "olive")
})
output$resu8 <- renderValueBox({
req(reactivo())
afir <- reactivo()$afir
nn <- reactivo()$depto
if(afir){
prop <- data_prop_depto %>%
filter(DEPTO == nn) %>%
select(prop_19) %>%
t() %>%
as.vector()
valueBox(value = tags$p(paste(round(prop,4)*100, '%',sep=''), style = "font-size: 100%;"),
paste("Se recomienda destinar este porcentaje de los recursos públicos perteneciente a los departamentos de mayor riesgo
a", nn, 'para el periodo 2019-4'),
icon = icon("chart-pie"), color = "purple")
}else{
prop <- data_prop_depto_2020 %>%
filter(DEPTO == nn) %>%
select(prop_20) %>%
t() %>%
as.vector()
valueBox(value = tags$p(paste(round(prop,4)*100, '%',sep=''), style = "font-size: 100%;"),
paste("Se recomienda destinar este porcentaje de los recursos públicos perteneciente a los departamentos de mayor riesgo
a", nn, 'para el periodo 2020-1'),
icon = icon("chart-pie"), color = "purple")
}
})
})
shinyApp(ui = ui, server = server)
runApp('Shiny_App_BA_MiguelEnciso')
runApp('Shiny_App_BA_MiguelEnciso')
runApp('Shiny_App_BA_MiguelEnciso')
runApp('Shiny_App_BA_MiguelEnciso')
runApp('Shiny_App_BA_MiguelEnciso')
runApp('Shiny_App_BA_MiguelEnciso')
runApp('Shiny_App_BA_MiguelEnciso')
runApp('Shiny_App_BA_MiguelEnciso')
shiny::runApp('Shiny_App_BA_MiguelEnciso')
shiny::runApp('Shiny_App_BA_MiguelEnciso')
runApp('Shiny_App_BA_MiguelEnciso')
runApp('Shiny_App_BA_MiguelEnciso')
?tags
tags$head
tags
ui <- shinyUI(
dashboardPage(dashboardHeader(title = span("Proyecto BA (Enciso-Merchan) - Universidad de los Andes",
style = "color: white; font-size: 14px"),
titleWidth = 400),
dashboardSidebar(
tags$head(tags$style(HTML('
/* main sidebar */
.skin-blue .main-sidebar {
background-color: #2D5FCC;
}
'))),
h4(''),
selectInput(inputId = 'trim',
label= "Seleccione trimestre para predicción",
choices = trimestres,
selected = NA,
multiple = F),
selectInput(inputId = 'depto',
label= "Seleccione departamento de riesgo alto",
choices = sort(otros),
selected = NA,
multiple = F),
actionButton(inputId = "Clic", label = 'Calcule pronóstico')
shiny::runApp('Shiny_App_BA_MiguelEnciso')
shiny::runApp('Shiny_App_BA_MiguelEnciso')
shiny::runApp('Shiny_App_BA_MiguelEnciso')
runApp('Shiny_App_BA_MiguelEnciso')
ui <- shinyUI(
dashboardPage(dashboardHeader(title = span("Proyecto BA (Enciso-Merchan) - Universidad de los Andes",
style = "color: white; font-size: 14px"),
titleWidth = 400),
dashboardSidebar(
tags$head(tags$style(HTML('
/* main sidebar */
.skin-blue .main-sidebar {
background-color: #2D5FCC;
}
'))),
h4(''),
selectInput(inputId = 'trim',
label= "Seleccione trimestre para predicción",
choices = trimestres,
selected = NA,
multiple = F),
selectInput(inputId = 'depto',
label= "Seleccione departamento de riesgo alto",
choices = sort(otros),
selected = NA,
multiple = F),
actionButton(inputId = "Clic", label = 'Calcule pronóstico')
runApp('Shiny_App_BA_MiguelEnciso')
runApp('Shiny_App_BA_MiguelEnciso')
runApp('Shiny_App_BA_MiguelEnciso')
shiny::runApp('Shiny_App_BA_MiguelEnciso')
setwd("C:/Users/Miguel Enciso/Desktop/prueba_cata")
gc(full = TRUE)
rm(list = ls())
library(dplyr)
library(tidyverse)
library(data.table)
library(odbc)
library(xgboost)
library(caret)
library(pROC)
setwd("C:/Users/Miguel Enciso/Desktop/prueba_cata")
install.packages('xgboost')
library(dplyr)
library(tidyverse)
library(data.table)
library(odbc)
library(xgboost)
library(caret)
library(pROC)
setwd("C:/Users/Miguel Enciso/Desktop/prueba_cata")
list.files()
library(openxlsx)
base <- read.xlsx('A1_Base_modelar_examen.xlsx')
View(base)
summary(base)
base <- read.xlsx('A1_Base_modelar_examen.xlsx', detectDates = T)
View(base)
base_final <- base %>%
select(-LATITUD_DOUBLE, -LONGITUD_DOUBLE,
-UPlCodigo, -Zona_av, -NOMBRE_COM, BARRIO_map)
View(base_final)
summary(base_final$F_FECHAAVALUO)
base_final <- base %>%
select(-LATITUD_DOUBLE, -LONGITUD_DOUBLE,
-UPlCodigo, -Zona_av, -NOMBRE_COM, BARRIO_map) %>%
filter(F_FECHAAVALUO >= '2017-01-01')
summary(base_final$F_FECHAAVALUO)
data_modelo <- base_final %>%
filter(F_FECHAAVALUO <= '2018-12-31')
summary(data_modelo$F_FECHAAVALUO)
data_modelo <- base_final %>%
filter(F_FECHAAVALUO <= '2018-12-31') %>%
select(-F_FECHAAVALUO)
todas <- names(data_modelo)
names(data_modelo)
todas <- names(data_modelo)[-c(length(names(data_modelo))-1)]
todas
c(length(names(data_modelo))-1)
todas <- names(data_modelo)[-c(length(names(data_modelo))-1)]
formula_todas <- as.formula(paste("" ,paste(todas, collapse=" + "), sep=" ~ ")) #
dummies <- dummyVars(formula_todas,
data = data_modelo) #CREO VARIABLES POR CATEGORIA
df_all_ohe <- as.data.frame(predict(dummies, newdata = data_modelo_2)) #
df_all_ohe <- as.data.frame(predict(dummies, newdata = data_modelo)) #
View(df_all_ohe)
base_final <- base %>%
select(-LATITUD_DOUBLE, -LONGITUD_DOUBLE,
-UPlCodigo, -Zona_av, -NOMBRE_COM, -BARRIO_map) %>%
filter(F_FECHAAVALUO >= '2017-01-01')
data_modelo <- base_final %>%
filter(F_FECHAAVALUO <= '2018-12-31') %>%
select(-F_FECHAAVALUO)
todas <- names(data_modelo)[-c(length(names(data_modelo))-1)]
formula_todas <- as.formula(paste("" ,paste(todas, collapse=" + "), sep=" ~ ")) #
dummies <- dummyVars(formula_todas,
data = data_modelo) #CREO VARIABLES POR CATEGORIA
df_all_ohe <- as.data.frame(predict(dummies, newdata = data_modelo)) #
View(df_all_ohe)
base_final <- base %>%
select(-LATITUD_DOUBLE, -LONGITUD_DOUBLE,
-UPlCodigo, -Zona_av, -NOMBRE_COM, -BARRIO_map) %>%
filter(F_FECHAAVALUO >= '2017-01-01') %>%
mutate(ESTRATO = as.factor(ESTRATO))
data_modelo <- base_final %>%
filter(F_FECHAAVALUO <= '2018-12-31') %>%
select(-F_FECHAAVALUO)
todas <- names(data_modelo)[-c(length(names(data_modelo))-1)]
formula_todas <- as.formula(paste("" ,paste(todas, collapse=" + "), sep=" ~ ")) #
dummies <- dummyVars(formula_todas,
data = data_modelo) #CREO VARIABLES POR CATEGORIA
df_all_ohe <- as.data.frame(predict(dummies, newdata = data_modelo)) #
View(df_all_ohe)
data_test <- base_final %>%
filter(F_FECHAAVALUO <= '2019-09-30', F_FECHAAVALUO <= '2019-01-01') %>%
select(-F_FECHAAVALUO)
data_test <- base_final %>%
filter(F_FECHAAVALUO <= '2019-09-30', F_FECHAAVALUO >= '2019-01-01') %>%
select(-F_FECHAAVALUO)
todas <- names(data_modelo)[-c(length(names(data_modelo))-1)]
formula_todas <- as.formula(paste("" ,paste(todas, collapse=" + "), sep=" ~ ")) #
dummies <- dummyVars(formula_todas,
data = data_modelo)
df_train <- as.data.frame(predict(dummies, newdata = data_modelo))
df_test <- as.data.frame(predict(dummies, newdata = data_test))
dtrain <- xgb.DMatrix(data.matrix(df_train),
label = data_modelo$AREA_PRIVADA_VALFINAL)
dtest <- xgb.DMatrix(data.matrix(df_test),
label = data_test$AREA_PRIVADA_VALFINAL)
watchlist <- list(train = dtrain, eval = dtest)
param <- list(booster = "gblinear",
objective = "binary:logistic",
max.depth = 5,
nround = 2,
lambda = 0,
lambda_bias = 0,
alpha = 0
eval_metric = "auc")
param <- list(booster = "gblinear",
objective = "binary:logistic",
max.depth = 5,
nround = 2,
lambda = 0,
lambda_bias = 0,
alpha = 0,
eval_metric = "auc")
bst <- xgb.train(param, dtrain, nrounds = 190, watchlist)
?xgboost
param <- list(booster = "gblinear",
objective = "reg:squarederror",
max.depth = 5,
nround = 2,
lambda = 0,
lambda_bias = 0,
alpha = 0,
eval_metric = "auc")
bst <- xgb.train(param, dtrain, nrounds = 190, watchlist)
param <- list(booster = "gblinear",
objective = "reg:squarederror",
max.depth = 5,
nround = 2,
lambda = 0,
lambda_bias = 0,
alpha = 0,
eval_metric = "rmse ")
bst <- xgb.train(param, dtrain, nrounds = 190, watchlist)
param <- list(booster = "gblinear",
objective = "reg:squarederror",
max.depth = 5,
nround = 2,
lambda = 0,
lambda_bias = 0,
alpha = 0,
eval_metric = "rmse")
bst <- xgb.train(param, dtrain, nrounds = 190, watchlist)
filas_train <- which(base_final$F_FECHAAVALUO <= '2018-12-21')
base_final <- base %>%
select(-LATITUD_DOUBLE, -LONGITUD_DOUBLE,
-UPlCodigo, -Zona_av, -NOMBRE_COM, -BARRIO_map) %>%
filter(F_FECHAAVALUO >= '2017-01-01') %>%
mutate(ESTRATO = as.factor(ESTRATO))
filas_train <- which(base_final$F_FECHAAVALUO <= '2018-12-21')
filas_train <- which(base_final$F_FECHAAVALUO <= '2018-12-31')
filas_test <- which(base_final$F_FECHAAVALUO <= '2019-09-30' &
base_final$F_FECHAAVALUO <= '2019-01-01')
filas_test <- which(base_final$F_FECHAAVALUO <= '2019-09-30' &
base_final$F_FECHAAVALUO >= '2019-01-01')
names(base_final)
todas <- names(base_final)[-c(length(names(base_final))-1)]
formula_todas <- as.formula(paste("" ,paste(todas, collapse=" + "), sep=" ~ ")) #
dummies <- dummyVars(formula_todas,
data = data_modelo)
dummies <- dummyVars(formula_todas,
data = base_final)
todas <- names(base_final)[-c(length(names(base_final))-1)]
formula_todas <- as.formula(paste("" ,paste(todas, collapse=" + "), sep=" ~ ")) #
dummies <- dummyVars(formula_todas,
data = base_final)
todas
formula_todas
dummies
df_train <- as.data.frame(predict(dummies, newdata = base_final[filas_train,]))
df_test <- as.data.frame(predict(dummies, newdata = base_final[filas_test,]))
todas <- names(base_final)[-c(length(names(base_final))-1)]
formula_todas <- as.formula(paste("" ,paste(todas, collapse=" + "), sep=" ~ ")) #
dummies <- dummyVars(formula_todas,
data = base_final)
df_all <- as.data.frame(predict(dummies, newdata = base_final))
df_train <- df_all[filas_train]
df_train <- df_all[filas_train,]
df_test <- df_all[filas_test]
df_test <- df_all[filas_test,]
dtrain <- xgb.DMatrix(data.matrix(df_train),
label = base_final$AREA_PRIVADA_VALFINAL[filas_train])
dtest <- xgb.DMatrix(data.matrix(df_test),
label = base_final$AREA_PRIVADA_VALFINAL[filas_test])
watchlist <- list(train = dtrain, eval = dtest)
param <- list(booster = "gblinear",
objective = "reg:squarederror",
max.depth = 5,
nround = 2,
lambda = 0,
lambda_bias = 0,
alpha = 0,
eval_metric = "rmse")
bst <- xgb.train(param, dtrain, nrounds = 190, watchlist)
param <- list(booster = "gblinear",
objective = "reg:squarederror",
max.depth = 2,
lambda = 3,
lambda_bias = 2,
alpha = 0,
eval_metric = "rmse")
bst <- xgb.train(param, dtrain, nrounds = 190, watchlist)
param <- list(booster = "gblinear",
objective = "reg:squarederror",
max.depth = 3,
lambda = 3,
lambda_bias = 2,
alpha = 0,
eval_metric = "rmse")
bst <- xgb.train(param, dtrain, nrounds = 190, watchlist)
bst <- xgb.train(param, dtrain, nrounds = 400, watchlist)
param <- list(booster = "gblinear",
objective = "reg:squarederror",
max.depth = 3,
lambda = 5,
lambda_bias = 2,
alpha = 0,
eval_metric = "rmse")
bst <- xgb.train(param, dtrain, nrounds = 400, watchlist)
param <- list(booster = "gblinear",
objective = "reg:squarederror",
max.depth = 3,
lambda = 1,
lambda_bias = 2,
alpha = 0,
eval_metric = "rmse")
bst <- xgb.train(param, dtrain, nrounds = 400, watchlist)
param <- list(booster = "gblinear",
objective = "reg:squarederror",
max.depth = 3,
lambda = 1,
lambda_bias = 3,
alpha = 0,
eval_metric = "rmse")
bst <- xgb.train(param, dtrain, nrounds = 400, watchlist)
param <- list(booster = "gblinear",
objective = "reg:squarederror",
max.depth = 3,
lambda = 1,
lambda_bias = 3,
alpha = 2,
eval_metric = "rmse")
bst <- xgb.train(param, dtrain, nrounds = 400, watchlist)
param <- list(booster = "gblinear",
objective = "reg:squarederror",
max.depth = 3,
lambda = 1,
lambda_bias = 3,
alpha = 200,
eval_metric = "rmse")
bst <- xgb.train(param, dtrain, nrounds = 400, watchlist)
param <- list(booster = "gblinear",
objective = "reg:squarederror",
max.depth = 3,
lambda = 1,
lambda_bias = 3,
alpha = 0,
eval_metric = "rmse")
bst <- xgb.train(param, dtrain, nrounds = 400, watchlist)
param <- list(booster = "gblinear",
objective = "reg:squarederror",
max.depth = 3,
lambda = 1,
lambda_bias = 4,
alpha = 0,
eval_metric = "rmse")
bst <- xgb.train(param, dtrain, nrounds = 400, watchlist)
param <- list(booster = "gblinear",
objective = "reg:squarederror",
max.depth = 3,
lambda = 100,
lambda_bias = 4,
alpha = 0,
eval_metric = "rmse")
bst <- xgb.train(param, dtrain, nrounds = 400, watchlist)
param <- list(booster = "gblinear",
objective = "reg:squarederror",
max.depth = 3,
lambda = 0.5,
lambda_bias = 4,
alpha = 0,
eval_metric = "rmse")
bst <- xgb.train(param, dtrain, nrounds = 400, watchlist)
param <- list(booster = "gblinear",
objective = "reg:squarederror",
max.depth = 3,
lambda = 0.5,
lambda_bias = 0,
alpha = 0,
eval_metric = "rmse")
bst <- xgb.train(param, dtrain, nrounds = 400, watchlist)
param <- list(booster = "gblinear",
objective = "reg:squarederror",
max.depth = 2,
lambda = 0.5,
lambda_bias = 0,
alpha = 0,
eval_metric = "rmse")
bst <- xgb.train(param, dtrain, nrounds = 400, watchlist)
param <- list(booster = "gblinear",
objective = "reg:squarederror",
max.depth = 2,
lambda = 2,
lambda_bias = 0,
alpha = 0,
eval_metric = "rmse")
bst <- xgb.train(param, dtrain, nrounds = 400, watchlist)
param <- list(booster = "gblinear",
objective = "reg:squarederror",
max.depth = 2,
lambda = 3,
lambda_bias = 0,
alpha = 0,
eval_metric = "rmse")
bst <- xgb.train(param, dtrain, nrounds = 400, watchlist)
param <- list(booster = "gblinear",
objective = "reg:squarederror",
max.depth = 2,
lambda = 2,
lambda_bias = 0,
alpha = 0,
eval_metric = "rmse")
bst <- xgb.train(param, dtrain, nrounds = 400, watchlist)
yy_all <- predict(bst, newdata = as.matrix(df_all))
param <- list(booster = "gblinear",
objective = "reg:squarederror",
max.depth = 2,
lambda = 2,
lambda_bias = 500,
alpha = 0,
eval_metric = "rmse")
bst <- xgb.train(param, dtrain, nrounds = 400, watchlist)
